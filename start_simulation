#!/usr/bin/env python2
"""
Copyright (C) 2017 Jakub Krajniak <jkrajniak@gmail.com>

This file is distributed under free software licence:
you can redistribute it and/or modify it under the terms of the
GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import espressopp  # NOQA
import math  # NOQA
import numpy
from mpi4py import MPI
import random
import os
import time

from adresslab import files_io
from adresslab import tools_sim as tools
from adresslab import gromacs_topology

import adresslab.tools as general_tools

from adresslab.app_args import _args_md as _args

# GROMACS units, kJ/mol K
kb = 0.0083144621

# Storage options

# Mostly you do not need to modify lines below.
def main():  # NOQA
    h5md_group = 'atoms'
    time0 = time.time()
    args = _args().parse_args()

    max_cutoff = args.cutoff

    print('Welcome in AdResSLab!')

    generate_exclusions = args.exclusion_list is None or not os.path.exists(args.exclusion_list)

    input_conf = gromacs_topology.read(args.top, doRegularExcl=generate_exclusions)
    input_gro_conf = files_io.GROFile(args.conf)
    input_gro_conf.read()

    if not generate_exclusions:
        exclusion_file = open(args.exclusion_list, 'r')
        exclusions = [map(int, x.split()) for x in exclusion_file.readlines()]
        print('Read exclusion list from {} (total: {})'.format(args.exclusion_list, len(exclusions)))
        input_conf = input_conf._replace(exclusions=exclusions)
    else:
        exclusion_list_file = 'exclusion_{}.list'.format(args.top.split('.')[0])
        with open(exclusion_list_file, 'w') as fel:
            for p in input_conf.exclusions:
                fel.write('{} {}\n'.format(*p))
        print('Save exclusion list: {} ({})'.format(exclusion_list_file, len(input_conf.exclusions)))

    box = input_gro_conf.box
    print('Setting up simulation...')

    # Tune simulation parameter according to arguments
    integrator_step = args.int_step
    k_steps = int(args.run / integrator_step)

    if args.skin:
        skin = args.skin
    else:
        skin = 0.16

    rng_seed = args.rng_seed
    if args.rng_seed == -1:
        rng_seed = random.randint(1, 10000)
        args.rng_seed = rng_seed

    # Initialize RNG
    random.seed(rng_seed)

    # Save the params to the the file.
    _args().save_to_file('{}_{}_params.out'.format(args.output_prefix, rng_seed), args)

    print('Skin: {}'.format(skin))
    print('RNG Seed: {}'.format(rng_seed))
    print('Time step: {}'.format(args.dt))
    print('Cutoff: {}'.format(max_cutoff))
    print('Boltzmann constant = {}'.format(kb))

    # Setup system
    system = espressopp.System()
    system.rng = espressopp.esutil.RNG(rng_seed)

    # Generate particle lists.
    part_prop, all_particles, adress_tuple = tools.genParticleList(
        input_conf, input_gro_conf, adress=True, use_charge=True)
    print('Reads {} particles with properties {}'.format(len(all_particles), part_prop))

    if input_conf.charges:
        print('Total charge: {}'.format(sum(input_conf.charges)))

    print('Running with box {}'.format(box))
    system.bc = espressopp.bc.OrthorhombicBC(system.rng, box)
    system.skin = skin

    if args.node_grid:
        nodeGrid = map(int, args.node_grid.split(','))
    else:
        nodeGrid = espressopp.tools.decomp.nodeGrid(MPI.COMM_WORLD.size)
    print('Number of nodes {}, node-grid: {}'.format(
        MPI.COMM_WORLD.size, nodeGrid))
    if args.cell_grid:
        cellGrid = map(int, args.cell_grid.split(','))
    else:
        cellGrid = espressopp.tools.decomp.cellGrid(box, nodeGrid, max_cutoff, skin)
    print('Cell grid: {}'.format(cellGrid))

    system.storage = espressopp.storage.DomainDecompositionAdress(system, nodeGrid, cellGrid)

    integrator = espressopp.integrator.VelocityVerlet(system)
    integrator.dt = args.dt
    system.integrator = integrator

    # Adds particles here
    # Apparently AdResS required to first add CG particle and then the corresponding AT particles...
    tmpp = []
    new_plist = []
    for p in all_particles:
        if p.adrat == 1:  # atomistic particle
            tmpp.append(tuple(p))
        else:  # CG particle
            new_plist.append(tuple(p))
            new_plist.extend(tmpp)
            tmpp = []
    system.storage.addParticles(new_plist, *part_prop)

    print(adress_tuple)

    ftpl = espressopp.FixedTupleListAdress(system.storage)
    ftpl.addTuples(adress_tuple)
    system.storage.setFixedTuplesAdress(ftpl)

    system.storage.decompose()

    print('Prepared:')
    print('Bonds: {}'.format(sum(len(x) for x in input_conf.bondtypes.values())))
    print('Angles: {}'.format(sum(len(x) for x in input_conf.angletypes.values())))
    print('Dihedrals: {}'.format(sum(len(x) for x in input_conf.dihedraltypes.values())))
    print('Pairs: {}'.format(sum(len(x) for x in input_conf.pairtypes.values())))

    print('Setting AdResS module')
    print('Excplicit: {}'.format(args.adress_ex))
    print('Hybrid: {}'.format(args.adress_hy))
    if args.adress_centre == 'box_centre':
        adr_centre = [box[0]/2.0, box[1]/2.0, box[2]/2.0]
    else:
        adr_centre = map(float, args.adress_centre.split(','))
    print('Centre coordinates: {}'.format(adr_centre))
    print('Spherical region: {}'.format(args.adress_use_sphere))

    # Define interactions.
    verletlist = espressopp.VerletListAdress(system, cutoff=max_cutoff, adrcut=max_cutoff,
                                             dEx=args.adress_ex, dHy=args.adress_hy,
                                             adrCenter=adr_centre,
                                             sphereAdr=args.adress_use_sphere)
    verletlist.exclude(input_conf.exclusions)

    lj_interaction = tools.setLennardJonesInteractions(
        input_conf, verletlist, max_cutoff, input_conf.nonbond_params, ftpl=ftpl)
    coulomb_interaction = gromacs_topology.setCoulombInteractions(system,
                                                                  verletlist,
                                                                  max_cutoff,
                                                                  input_conf.atomtypeparams,
                                                                  epsilon1=args.coulomb_epsilon1,
                                                                  epsilon2=args.coulomb_epsilon2,
                                                                  kappa=args.coulomb_kappa,
                                                                  ftpl=ftpl)

    tools.setTabulatedInteractions(input_conf.atomtypeparams, max_cutoff, lj_interaction)
    tools.setBondedInteractions(system, input_conf, ftpl)
    tools.setAngleInteractions(system, input_conf, ftpl)

    system.addInteraction(lj_interaction, 'lj')
    system.addInteraction(coulomb_interaction, 'coulomb')

    print('Number of interactions: {}'.format(system.getNumberOfInteractions()))

    # Define the thermostat
    temperature = args.temperature * kb
    print('Temperature: {} ({}), gamma: {}'.format(args.temperature, temperature, args.thermostat_gamma))
    print('Thermostat: {}'.format(args.thermostat))
    if args.thermostat == 'lv':
        thermostat = espressopp.integrator.LangevinThermostat(system)
        thermostat.temperature = temperature
        thermostat.gamma = args.thermostat_gamma
    elif args.thermostat == 'vr':
        thermostat = espressopp.integrator.StochasticVelocityRescaling(system)
        thermostat.temperature = temperature
        thermostat.coupling = args.thermostat_gamma
    integrator.addExtension(thermostat)

    print("Added tuples, decomposing now ...")

    ext_analysis, system_analysis = tools.setSystemAnalysis(system, integrator, args, args.energy_collect)

    if args.remove_com > 0:
        print('Removes total velocity of the system every {} steps'.format(args.remove_com))
        total_velocity = espressopp.analysis.CMVelocity(system)
        ext_remove_com = espressopp.integrator.ExtAnalyze(total_velocity, args.remove_com)
        integrator.addExtension(ext_remove_com)

    print('Number of particles: {}'.format(len(all_particles)))

    # add AdResS
    adress = espressopp.integrator.Adress(system, verletlist, ftpl)
    integrator.addExtension(adress)

    if args.cap_force:
        print('Define maximum cap-force in the system (max: {})'.format(args.cap_force))
        cap_force = espressopp.integrator.CapForce(system, args.cap_force)
        integrator.addExtension(cap_force)

    print('Decomposing...')
    espressopp.tools.AdressDecomp(system, integrator)

    xdensity_comp = espressopp.analysis.XDensity(system)
    xdensity = numpy.array(xdensity_comp.compute(100))

    system_analysis.info()
    # Main integrator loop.
    for k in range(k_steps):
        integrator.run(args.int_step)
        system_analysis.info()
        t = numpy.array(xdensity_comp.compute(100))
        xdensity += t

    xdensity = xdensity / k_steps
    dr = box[0]/100
    print(dr)
    xdensity = numpy.column_stack((numpy.arange(0, box[0], dr), xdensity))

    numpy.savetxt('xdensity.csv', xdensity)

    print('Finished!')
    print('Total time: {}'.format(time.time() - time0))
    espressopp.tools.analyse.final_info(system, integrator, verletlist, time0, time.time())


if __name__ == '__main__':
    main()
